{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","InputTask","_ref","inputTaskFinish","setInputTaskFinish","inputTaskText","setInputTaskText","addTask","react_default","a","createElement","type","checked","onChange","event","target","placeholder","value","onClick","TaskList","_ref2","taskList","updateTaskFinish","removeTask","map","task","index","key","isFinish","text","id","App","_useState","useState","_useState2","Object","slicedToArray","count","setCount","_useState3","_useState4","setTaskList","_useState5","_useState6","_useState7","_useState8","App_InputTask","concat","toConsumableArray","slice","assign","console","log","App_TaskList","filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.baa7ed8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState , useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst App = () =>{\n  const [count,setCount] = useState(0);\n  const [taskList ,setTaskList] = useState([]);\n  const [inputTaskText ,setInputTaskText] = useState(\"\");\n  const [inputTaskFinish ,setInputTaskFinish] = useState(false);\n  const updateTaskFinish = (index,value) =>{\n      setTaskList([\n        ...taskList.slice(0,index),\n        Object.assign({}, taskList[index], { isFinish: value }),\n        ...taskList.slice(index+1)\n    ]);\n  }\n\n  const increaseCount = () =>{\n    setCount(count+1);\n    console.log(count);\n  }\n\n  const addTask = () =>{\n    setTaskList([\n      ...taskList.slice(),\n      Object.assign({},{text : inputTaskText,isFinish : inputTaskFinish , id :count}),\n    ]);\n    setInputTaskText(\"\");\n    setInputTaskFinish(false);\n    increaseCount();\n  }\n\n  const removeTask = (index) =>{\n    console.log(index)\n    setTaskList([\n      ...taskList.filter(task => task.id !== index)\n    ]);\n  }\n  \n  //useEffect(() => setTaskList(taskList => taskList), [taskList]);\n\n  return (\n    <div>\n      <h1>Hello Gu Do</h1>\n      <InputTask \n        inputTaskFinish = {inputTaskFinish}\n        setInputTaskFinish = {setInputTaskFinish}\n        inputTaskText = {inputTaskText}\n        setInputTaskText = {setInputTaskText}\n        addTask = {addTask}\n      />\n      \n      <TaskList \n        taskList={taskList} \n        updateTaskFinish={updateTaskFinish} \n        removeTask={removeTask}/>\n    </div>\n  );\n};\n\nconst InputTask = ({inputTaskFinish,setInputTaskFinish,inputTaskText,setInputTaskText,addTask}) =>{\n  return (\n      <label>Input your task : \n        <input type=\"checkbox\" checked={inputTaskFinish} onChange={event => setInputTaskFinish(event.target.checked)}/>\n        <input type=\"text\" placeholder=\"Please add task\" value={inputTaskText} onChange={event => setInputTaskText(event.target.value)}/>\n        \n        <button type=\"button\" onClick={addTask}>Add</button>\n      </label>\n  );\n}\n\nInputTask.propTypes = {\n  inputTaskText: PropTypes.string.isRequired,\n  inputTaskFinish: PropTypes.bool.isRequired,\n};\n\n\nconst TaskList = ({taskList,updateTaskFinish,removeTask}) =>{\n  return (\n    <div>\n      <h1>Your task List : </h1>\n\n      <ol>\n        {taskList.map((task,index) => (\n          <li key={index}>\n            <input type=\"checkbox\" \n              checked={task.isFinish} \n              onChange={event => updateTaskFinish(index,event.target.checked)}/> \n            {task.text}\n            <button type=\"button\" onClick={event => removeTask(task.id)}>Delete</button>\n          </li>\n        ))}\n      </ol>\n    </div>\n  );\n}\n\nTaskList.propTypes = {\n  taskList: PropTypes.array.isRequired\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}